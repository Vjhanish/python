"""
# Definition for a Node.
class Node(object):
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution(object):
    def cloneGraph(self, node):
        """
        :type node: Node
        :rtype: Node
        """
        if(node==None):
            return None
        hash=dict()

        def fun(root):
            if(hash.get(root.val,0)==0):
                new = Node(root.val)
                hash[root.val]=new
            for x in root.neighbors:
                if(x.val not in hash):
                    fun(x)
                new.neighbors.append(hash[x.val])

        fun(node)
        return hash[node.val]



        
    
