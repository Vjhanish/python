class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None

class LRUCache(object):

    def __init__(self, capacity):
        self.capacity = capacity
        self.cache = {}  # HashMap to store key -> node mapping
        self.head = Node(0, 0)  # Dummy head
        self.tail = Node(0, 0)  # Dummy tail
        self.head.next = self.tail
        self.tail.prev = self.head

    def _remove(self, node):
        """Remove a node from the linked list."""
        node.prev.next = node.next
        node.next.prev = node.prev

    def _add(self, node):
        """Add a node to the front (right after head)."""
        node.next = self.head.next
        node.prev = self.head
        self.head.next.prev = node
        self.head.next = node

    def get(self, key):
        """Return the value of the key if it exists, otherwise return -1."""
        if key in self.cache:
            node = self.cache[key]
            self._remove(node)  # Move node to the front
            self._add(node)
            return node.value
        return -1

    def put(self, key, value):
        """Insert or update a key-value pair."""
        if key in self.cache:
            self._remove(self.cache[key])  # Remove old node

        node = Node(key, value)
        self._add(node)  # Add new node to the front
        self.cache[key] = node

        if len(self.cache) > self.capacity:
            # Evict least recently used node (tail's previous node)
            lru = self.tail.prev
            self._remove(lru)
            del self.cache[lru.key]

        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
