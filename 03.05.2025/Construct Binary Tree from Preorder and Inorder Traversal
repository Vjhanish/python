# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


class Solution(object):
    def buildTree(self, preorder, inorder):
        # Create a hashmap for quick lookup of root index in inorder
        inorder_index_map = {val: idx for idx, val in enumerate(inorder)}

        # Use helper function with indices
        def helper(pre_left, pre_right, in_left, in_right):
            if pre_left > pre_right or in_left > in_right:
                return None
            
            # The first element in preorder is the root
            root_val = preorder[pre_left]
            root = TreeNode(root_val)

            # Get the index of the root in inorder using the hashmap
            root_index = inorder_index_map[root_val]

            # Calculate the size of the left subtree
            left_tree_size = root_index - in_left

            # Recursively build the left and right subtrees
            root.left = helper(pre_left + 1, pre_left + left_tree_size, in_left, root_index - 1)
            root.right = helper(pre_left + left_tree_size + 1, pre_right, root_index + 1, in_right)

            return root

        # Initialize the recursive helper with the full range of preorder and inorder
        return helper(0, len(preorder) - 1, 0, len(inorder) - 1)
